diff -uNrp zabbix-1.6.9.orig//src/libs/zbxsysinfo/common/file.c zabbix-1.6.9//src/libs/zbxsysinfo/common/file.c
--- zabbix-1.6.9.orig//src/libs/zbxsysinfo/common/file.c	2010-03-25 23:53:19.000000000 +0900
+++ zabbix-1.6.9//src/libs/zbxsysinfo/common/file.c	2011-11-02 13:24:30.000000000 +0900
@@ -25,6 +25,8 @@
 
 #include "file.h"
 
+extern int     CONFIG_TIMEOUT;
+
 int	VFS_FILE_SIZE(const char *cmd, const char *param, unsigned flags, AGENT_RESULT *result)
 {
 	struct stat	buf;
@@ -135,12 +137,13 @@ int	VFS_FILE_REGEXP(const char *cmd, con
 	int	len;
 	char	tmp[MAX_STRING_LEN];
 	char	*c;
-
 	char	*buf = NULL;
+	double  ts;
 
         assert(result);
 
         init_result(result);
+	ts = zbx_time();
 
 	memset(tmp,0,MAX_STRING_LEN);
 
@@ -154,7 +157,6 @@ int	VFS_FILE_REGEXP(const char *cmd, con
 		return SYSINFO_RET_FAIL;
 	}
 
-
 	if(NULL == (f = fopen(filename,"r")))
 	{
 		return SYSINFO_RET_FAIL;
@@ -165,6 +167,11 @@ int	VFS_FILE_REGEXP(const char *cmd, con
 		goto lbl_fail;
 	}
 
+	if (CONFIG_TIMEOUT < zbx_time() - ts)
+	{
+		goto lbl_fail;
+	}
+
 	if(0 == fread(buf, 1, MAX_FILE_LEN-1, f))
 	{
 		goto lbl_fail;
@@ -205,12 +212,13 @@ int	VFS_FILE_REGMATCH(const char *cmd, c
 	FILE	*f = NULL;
 	int	len;
 	char	*c;
-
 	char	*buf = NULL;
+	double  ts;
 
         assert(result);
 
         init_result(result);
+	ts = zbx_time();
 
 	if(get_param(param, 1, filename, MAX_STRING_LEN) != 0)
 	{
@@ -222,7 +230,6 @@ int	VFS_FILE_REGMATCH(const char *cmd, c
 		return SYSINFO_RET_FAIL;
 	}
 
-
 	if(NULL == (f = fopen(filename,"r")))
 	{
 		return SYSINFO_RET_FAIL;
@@ -233,6 +240,11 @@ int	VFS_FILE_REGMATCH(const char *cmd, c
 		goto lbl_fail;
 	}
 
+	if (CONFIG_TIMEOUT < zbx_time() - ts)
+	{
+		goto lbl_fail;
+	}
+
 	if(0 == fread(buf, 1, MAX_FILE_LEN-1, f))
 	{
 		goto lbl_fail;
@@ -280,10 +292,12 @@ int	VFS_FILE_MD5SUM(const char *cmd, con
 	md5_byte_t	hash[MD5_DIGEST_SIZE];
 
 	char filename[MAX_STRING_LEN];
+	double		ts;
 	
 	assert(result);
 	
         init_result(result);	
+	ts = zbx_time();
 
         if(num_param(param) > 1)
         {
@@ -312,9 +326,19 @@ int	VFS_FILE_MD5SUM(const char *cmd, con
 		return	SYSINFO_RET_FAIL;
 	}
 
+	if (CONFIG_TIMEOUT < zbx_time() - ts)
+	{
+		goto lbl_fail;
+	}
+
         md5_init(&state);
 	while ((nr = fread(buf, 1, (size_t)sizeof(buf), file)) > 0)
 	{
+		if (CONFIG_TIMEOUT < zbx_time() - ts)
+		{
+			goto lbl_fail;
+		}
+
         	md5_append(&state,(const md5_byte_t *)buf, (int)nr);
 	}
         md5_finish(&state, hash);
@@ -331,6 +355,11 @@ int	VFS_FILE_MD5SUM(const char *cmd, con
 
 	return SYSINFO_RET_OK;
 
+lbl_fail:
+
+	zbx_fclose(file);
+
+	return	SYSINFO_RET_FAIL;
 }
 
 /* Code for cksum is based on code from cksum.c */
@@ -412,10 +441,12 @@ int	VFS_FILE_CKSUM(const char *cmd, cons
 	u_long cval, clen;
 	FILE	*f;
 	char	filename[MAX_STRING_LEN];
+	double		ts;
 
 	assert(result);
 
         init_result(result);	
+	ts = zbx_time();
 
 	if(num_param(param) > 1)
         {
@@ -432,11 +463,21 @@ int	VFS_FILE_CKSUM(const char *cmd, cons
 		return	SYSINFO_RET_FAIL;
 	}
 
+	if (CONFIG_TIMEOUT < zbx_time() - ts)
+	{
+		goto lbl_fail;
+	}
+
 #define	COMPUTE(var, ch)	(var) = (var) << 8 ^ crctab[(var) >> 24 ^ (ch)]
 
 	crc = len = 0;
 	while ((nr = (int)fread(buf, 1, sizeof(buf), f)) > 0)
 	{
+		if (CONFIG_TIMEOUT < zbx_time() - ts)
+		{
+			goto lbl_fail;
+		}
+
 		for( len += nr, p = buf; nr--; ++p)
 		{
 			COMPUTE(crc, *p);
@@ -461,4 +502,10 @@ int	VFS_FILE_CKSUM(const char *cmd, cons
 	SET_UI64_RESULT(result, cval);
 
 	return	SYSINFO_RET_OK;
+
+lbl_fail:
+
+	zbx_fclose(f);
+
+	return	SYSINFO_RET_FAIL;
 }
